#
#    This file is part of TuneMPC.
#
#    TuneMPC -- A Tool for Economic Tuning of Tracking (N)MPC Problems.
#    Copyright (C) 2020 Jochem De Schutter, Mario Zanon, Moritz Diehl (ALU Freiburg).
#
#    TuneMPC is free software; you can redistribute it and/or
#    modify it under the terms of the GNU Lesser General Public
#    License as published by the Free Software Foundation; either
#    version 3 of the License, or (at your option) any later version.
#
#    TuneMPC is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public
#    License along with TuneMPC; if not, write to the Free Software Foundation,
#    Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
#
#
#!/usr/bin/python3
""" Example of a periodic, single-aircraft drag-mode airborne wind energy system.

The user inputs are generated by the file "prepare_inputs.py"

Example description found in:

TuneMPC - A Tool for Economic Tuning of Tracking (N)MPC Problems
J. De Schutter, M. Zanon, M. Diehl
(pending approval)

:author: Jochem De Schutter

"""

import tunempc
import pickle

# load user input
with open('user_input.pkl','rb') as f:
    user_input = pickle.load(f)

# set-up tuning problem
tuner = tunempc.Tuner(
    f = user_input['f'],
    l = user_input['l'],
    h = user_input['h'],
    p = user_input['p']
)

# solve OCP
wsol = tuner.solve_ocp(w0 = user_input['w0'])

# convexify stage cost matrices
Hc   = tuner.convexify(solver='mosek')
S    = tuner.S

sys = tuner.sys
sys['vars'] = {
    'x': sys['vars']['x'].shape,
    'u': sys['vars']['u'].shape,
    'us': sys['vars']['us'].shape
    }

sol = {
    'S': S,
    'wsol': wsol,
    'lam_g': tuner.pocp.lam_g,
    'indeces_As': tuner.pocp.indeces_As,
    'sys': sys,
}

SAVE = True
if SAVE:
    with open('convex_reference.pkl','wb') as f:
        pickle.dump(sol,f)
